package lentopallotilastotyokalu.test;
// Generated by ComTest BEGIN
import java.io.File;
import lentopallotilastotyokalu.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.08 19:16:45 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class JoukkueetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa45 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa45() throws SailoException {    // Joukkueet: 45
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue tiimi1 = new Joukkue(), tiimi2 = new Joukkue(); 
    assertEquals("From: Joukkueet line: 49", 0, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 50", 1, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi2); assertEquals("From: Joukkueet line: 51", 2, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 52", 3, joukkueet.getLkm()); 
    assertEquals("From: Joukkueet line: 53", tiimi1, joukkueet.anna(0)); 
    assertEquals("From: Joukkueet line: 54", tiimi2, joukkueet.anna(1)); 
    assertEquals("From: Joukkueet line: 55", tiimi1, joukkueet.anna(2)); 
    assertEquals("From: Joukkueet line: 56", false, joukkueet.anna(1) == tiimi1); 
    assertEquals("From: Joukkueet line: 57", true, joukkueet.anna(1) == tiimi2); 
    try {
    assertEquals("From: Joukkueet line: 58", tiimi1, joukkueet.anna(3)); 
    fail("Joukkueet: 58 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 59", 4, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 60", 5, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 61", 6, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 62", 7, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 63", 8, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 64", 9, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Joukkueet line: 65", 10, joukkueet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta93 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta93() throws SailoException {    // Joukkueet: 93
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue joukkue1 = new Joukkue(), joukkue2 = new Joukkue(); 
    joukkue1.rekisteroi(); 
    joukkue2.rekisteroi(); 
    joukkue1.taytaPuulaakiTiedoilla(); 
    joukkue2.taytaPuulaakiTiedoilla(); 
    String testiTiedosto = "testijoukkueet"; 
    File ftied = new File(testiTiedosto+".dat"); 
    ftied.delete(); 
    try {
    joukkueet.lueTiedostosta(testiTiedosto); 
    fail("Joukkueet: 106 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    joukkueet.lisaa(joukkue1); 
    joukkueet.lisaa(joukkue2); 
    joukkueet.tallenna(); 
    joukkueet = new Joukkueet();  // Poistetaan vanhat luomalla uusi
    joukkueet.lueTiedostosta(testiTiedosto);  // johon ladataan tiedot tiedostosta.
    Iterator<Joukkue> i = joukkueet.iterator(); 
    assertEquals("From: Joukkueet line: 113", joukkue1.toString(), i.next().toString()); 
    assertEquals("From: Joukkueet line: 114", joukkue2.toString(), i.next().toString()); 
    assertEquals("From: Joukkueet line: 115", false, i.hasNext()); 
    joukkueet.lisaa(joukkue2); 
    joukkueet.tallenna(); 
    assertEquals("From: Joukkueet line: 118", true, ftied.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testJoukkueetIterator203 
   * @throws SailoException when error
   */
  @Test
  public void testJoukkueetIterator203() throws SailoException {    // Joukkueet: 203
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue tiimi1 = new Joukkue(), tiimi2 = new Joukkue(); 
    tiimi1.rekisteroi(); tiimi2.rekisteroi(); 
    joukkueet.lisaa(tiimi1); 
    joukkueet.lisaa(tiimi2); 
    joukkueet.lisaa(tiimi1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Joukkue joukkue:joukkueet) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+joukkue.getTunnusNro()); 
    String tulos = " " + tiimi1.getTunnusNro() + " " + tiimi2.getTunnusNro() + " " + tiimi1.getTunnusNro(); 
    assertEquals("From: Joukkueet line: 222", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Joukkue>  i=joukkueet.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Joukkue joukkue = i.next(); 
    ids.append(" "+joukkue.getTunnusNro()); 
    }
    assertEquals("From: Joukkueet line: 230", tulos, ids.toString()); 
    Iterator<Joukkue>  i=joukkueet.iterator(); 
    assertEquals("From: Joukkueet line: 233", true, i.next() == tiimi1); 
    assertEquals("From: Joukkueet line: 234", true, i.next() == tiimi2); 
    assertEquals("From: Joukkueet line: 235", true, i.next() == tiimi1); 
    try {
    i.next(); 
    fail("Joukkueet: 237 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}