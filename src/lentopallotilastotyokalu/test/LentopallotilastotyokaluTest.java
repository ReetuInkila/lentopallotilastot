package lentopallotilastotyokalu.test;
// Generated by ComTest BEGIN
import java.io.*;
import java.util.*;
import lentopallotilastotyokalu.Pelaaja;
import lentopallotilastotyokalu.Tilasto;
import lentopallotilastotyokalu.Joukkue;
import static org.junit.Assert.*;
import org.junit.*;
import lentopallotilastotyokalu.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2021.04.11 18:57:15 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class LentopallotilastotyokaluTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaaJoukkue70 
   * @throws SailoException when error
   */
  @Test
  public void testLisaaJoukkue70() throws SailoException {    // Lentopallotilastotyokalu: 70
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue tiimi1 = new Joukkue(), tiimi2 = new Joukkue(); 
    assertEquals("From: Lentopallotilastotyokalu line: 74", 0, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 75", 1, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi2); assertEquals("From: Lentopallotilastotyokalu line: 76", 2, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 77", 3, joukkueet.getLkm()); 
    assertEquals("From: Lentopallotilastotyokalu line: 78", tiimi1, joukkueet.anna(0)); 
    assertEquals("From: Lentopallotilastotyokalu line: 79", tiimi2, joukkueet.anna(1)); 
    assertEquals("From: Lentopallotilastotyokalu line: 80", tiimi1, joukkueet.anna(2)); 
    assertEquals("From: Lentopallotilastotyokalu line: 81", false, joukkueet.anna(1) == tiimi1); 
    assertEquals("From: Lentopallotilastotyokalu line: 82", true, joukkueet.anna(1) == tiimi2); 
    try {
    assertEquals("From: Lentopallotilastotyokalu line: 83", tiimi1, joukkueet.anna(3)); 
    fail("Lentopallotilastotyokalu: 83 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 84", 4, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 85", 5, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 86", 6, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 87", 7, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 88", 8, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 89", 9, joukkueet.getLkm()); 
    joukkueet.lisaa(tiimi1); assertEquals("From: Lentopallotilastotyokalu line: 90", 10, joukkueet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaaPelaaja103 
   * @throws SailoException when error
   */
  @Test
  public void testLisaaPelaaja103() throws SailoException {    // Lentopallotilastotyokalu: 103
    Pelaajat pelaajat = new Pelaajat(); 
    Pelaaja pelimies1 = new Pelaaja(), pelimies2 = new Pelaaja(); 
    assertEquals("From: Lentopallotilastotyokalu line: 107", 0, pelaajat.getLkm()); 
    pelaajat.lisaa(pelimies1); assertEquals("From: Lentopallotilastotyokalu line: 108", 1, pelaajat.getLkm()); 
    pelaajat.lisaa(pelimies2); assertEquals("From: Lentopallotilastotyokalu line: 109", 2, pelaajat.getLkm()); 
    pelaajat.lisaa(pelimies1); assertEquals("From: Lentopallotilastotyokalu line: 110", 3, pelaajat.getLkm()); 
    assertEquals("From: Lentopallotilastotyokalu line: 111", pelimies1, pelaajat.anna(0)); 
    assertEquals("From: Lentopallotilastotyokalu line: 112", pelimies2, pelaajat.anna(1)); 
    assertEquals("From: Lentopallotilastotyokalu line: 113", pelimies1, pelaajat.anna(2)); 
    assertEquals("From: Lentopallotilastotyokalu line: 114", false, pelaajat.anna(1) == pelimies1); 
    assertEquals("From: Lentopallotilastotyokalu line: 115", true, pelaajat.anna(1) == pelimies2); 
    try {
    assertEquals("From: Lentopallotilastotyokalu line: 116", pelimies1, pelaajat.anna(3)); 
    fail("Lentopallotilastotyokalu: 116 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaaTilasto129 */
  @Test
  public void testLisaaTilasto129() {    // Lentopallotilastotyokalu: 129
    Tilastot tilastot = new Tilastot(); 
    Tilasto suorite1 = new Tilasto(5), suorite2 = new Tilasto(8); 
    assertEquals("From: Lentopallotilastotyokalu line: 135", 0, tilastot.getLkm()); 
    tilastot.lisaa(suorite1); assertEquals("From: Lentopallotilastotyokalu line: 136", 1, tilastot.getLkm()); 
    tilastot.lisaa(suorite2); assertEquals("From: Lentopallotilastotyokalu line: 137", 2, tilastot.getLkm()); 
    tilastot.lisaa(suorite1); assertEquals("From: Lentopallotilastotyokalu line: 138", 3, tilastot.getLkm()); 
    List<Tilasto> loytyneet; 
    loytyneet = tilastot.annaTilastot(0); 
    assertEquals("From: Lentopallotilastotyokalu line: 142", 0, loytyneet.size()); 
    loytyneet = tilastot.annaTilastot(5); 
    assertEquals("From: Lentopallotilastotyokalu line: 144", 2, loytyneet.size()); 
    assertEquals("From: Lentopallotilastotyokalu line: 145", true, loytyneet.get(0) == suorite1); 
    assertEquals("From: Lentopallotilastotyokalu line: 146", true, loytyneet.get(1) == suorite1); 
    loytyneet = tilastot.annaTilastot(8); 
    assertEquals("From: Lentopallotilastotyokalu line: 148", 1, loytyneet.size()); 
    assertEquals("From: Lentopallotilastotyokalu line: 149", true, loytyneet.get(0) == suorite2); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta203 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta203() throws SailoException {    // Lentopallotilastotyokalu: 203
    String hakemisto = "testityokalu"; 
    File dir = new File(hakemisto); 
    File fjtied  = new File(hakemisto+"/joukkueet.dat"); 
    File fptied = new File(hakemisto+"/pelaajat.dat"); 
    File fttied = new File(hakemisto+"/tilastot.dat"); 
    dir.mkdir(); 
    fjtied.delete(); 
    fptied.delete(); 
    fttied.delete(); 
    Lentopallotilastotyokalu tyokalu = new Lentopallotilastotyokalu(); 
    tyokalu.setTiedosto(hakemisto);  // nimi annettava koska uusi poisti sen
    Joukkue tiimi = new Joukkue(); tiimi.taytaPuulaakiTiedoilla(); 
    Pelaaja peluri = new Pelaaja(); peluri.rekisteroi(); 
    Tilasto tilasto = new Tilasto(); tilasto.taytaEsimerkkiTiedoilla(peluri.getTunnusNro()); 
    tyokalu.lisaaJoukkue(tiimi); tyokalu.lisaaPelaaja(peluri); tyokalu.lisaaTilasto(tilasto); 
    tyokalu.tallenna(); 
    tyokalu = new Lentopallotilastotyokalu(); 
    tyokalu.setTiedosto(hakemisto);  // nimi annettava koska uusi poisti sen
    tyokalu.lueTiedostosta(hakemisto); 
    assertEquals("From: Lentopallotilastotyokalu line: 230", 1, tyokalu.getJoukkueita()); 
    assertEquals("From: Lentopallotilastotyokalu line: 231", 1, tyokalu.getPelaajia()); 
    assertEquals("From: Lentopallotilastotyokalu line: 232", 1, tyokalu.getTilastoja()); 
    List<Tilasto> loytyneet = tyokalu.annaTilastot(peluri); 
    Iterator<Tilasto> ih = loytyneet.iterator(); 
    assertEquals("From: Lentopallotilastotyokalu line: 235", tilasto.toString(), ih.next().toString()); 
    assertEquals("From: Lentopallotilastotyokalu line: 236", false, ih.hasNext()); 
    tyokalu.tallenna(); 
    assertEquals("From: Lentopallotilastotyokalu line: 238", true, fjtied.delete()); 
    assertEquals("From: Lentopallotilastotyokalu line: 239", true, fptied.delete()); 
    assertEquals("From: Lentopallotilastotyokalu line: 240", true, fttied.delete()); 
    assertEquals("From: Lentopallotilastotyokalu line: 241", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi305 
   * @throws CloneNotSupportedException when error
   * @throws SailoException when error
   */
  @Test
  public void testEtsi305() throws CloneNotSupportedException, SailoException {    // Lentopallotilastotyokalu: 305
    Lentopallotilastotyokalu tyokalu = new Lentopallotilastotyokalu(); 
    Pelaaja pelaaja1 = new Pelaaja(), pelaaja2 = new Pelaaja(); 
    pelaaja1.parse("1   |1     |2          |Eemil Tervaportti |Passari        | "); 
    pelaaja2.parse("5   |2     |26         |Pete Pelaaja      |Hakkuri        | "); 
    tyokalu.lisaaPelaaja(pelaaja1); tyokalu.lisaaPelaaja(pelaaja2); 
    Collection<Pelaaja> loytyneet = tyokalu.etsi("*Eemil*",3); 
    assertEquals("From: Lentopallotilastotyokalu line: 313", 1, loytyneet.size()); 
    Iterator<Pelaaja> it = loytyneet.iterator(); 
    assertEquals("From: Lentopallotilastotyokalu line: 315", true, it.next() == pelaaja1); 
  } // Generated by ComTest END
}